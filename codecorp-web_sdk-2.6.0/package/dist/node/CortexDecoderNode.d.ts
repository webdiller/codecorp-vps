import CDDecoder from "./CDDecoder";
import { CDPosition, CDResolution, CDFocus, CDTorch } from "../enums/CDCameraEnums";
import { CDDataParsing, CDDPM, CDPerformanceType, CDVerifier } from '../enums/performanceFeatures';
import { CDRect } from '../enums/CDRect';
import CDResult from './CDResult';
import { CDCharacterEncoding, CDCustomMode, CDPreprocessorType, CDSecurityLevel } from "../enums/CDDecoderEnums";
import CDSymbology from './CDSymbology';
import { AztecPolarity, CodabarChecksum, Code11Checksum, Code39Checksum, DataMatrixPolarity, DotCodePolarity, GoCodePolarity, GridMatrixPolarity, HongKong2Of5Checksum, IATA2Of5Checksum, Interleaved2Of5Checksum, Matrix2Of5Checksum, MSIPlesseyChecksum, NEC2Of5Checksum, QRCodePolarity, Straight2Of5Checksum } from '../enums/CDSymbologyEnums';
import CDPerformanceFeatures from './CDPerformanceFeatures';
import { license_status } from '../enums/CDLicenseStatus';
import { CDDecodeStatus } from '../enums/CDResultEnums';
import CDLicense from "./CDLicense";
export { CDDecoder, CDPerformanceFeatures, CDLicense, CDSymbology, CDResult, CDPerformanceType, CDDataParsing, CDDPM, CDVerifier, CDSecurityLevel, CDCustomMode, CDPreprocessorType, CDCharacterEncoding, license_status, CDDecodeStatus, CDRect, QRCodePolarity, DataMatrixPolarity, AztecPolarity, DotCodePolarity, GridMatrixPolarity, GoCodePolarity, HongKong2Of5Checksum, IATA2Of5Checksum, Interleaved2Of5Checksum, Matrix2Of5Checksum, Straight2Of5Checksum, NEC2Of5Checksum, CodabarChecksum, Code11Checksum, Code39Checksum, MSIPlesseyChecksum, CDPosition, CDResolution, CDFocus, CDTorch };
declare const _default: {
    CDDecoder: {
        "__#49@#nativeLib": import("../PrivateClasses/nativeLibManagerForNode").NativeLib;
        "__#49@#_barcodeLimit": number;
        "__#49@#_picklistMode": number;
        "__#49@#_multiResolution": CDCustomMode;
        "__#49@#_decoderTimeLimit": number;
        "__#49@#_barcodesToDecode": number;
        CDRect: CDRect;
        "__#49@#_codeWords": boolean;
        "__#49@#_roidimensions": {
            ROIset: boolean;
            ROIdimensions: CDRect;
            widthRatio: number;
            heightRatio: number;
        };
        "__#49@#_preprocesstype": CDPreprocessorType;
        "__#49@#_securityLevel": CDSecurityLevel;
        "__#49@#_decoding": boolean;
        "__#49@#_multiCodeOutputByPriority": boolean;
        "__#49@#_filterDuplicateResults": number;
        "__#49@#_charEncoding": CDCharacterEncoding;
        "__#49@#_qrLicenseCode": boolean;
        "__#49@#_qrconfiglic": string;
        "__#49@#_saved_result": {
            [key: string]: {
                createdAt: number;
                timeout: number;
            };
        };
        "__#49@#_saved_result_array": string[];
        "__#49@#_audioContext": AudioContext;
        "__#49@#_frameWidth": number;
        "__#49@#_frameHeight": number;
        "__#49@#_maxBarcodeRows": number;
        "__#49@#_maxBarcodeCols": number;
        "__#49@#_qrconfig": string;
        "__#49@#_multiFrameDecoding": boolean;
        "__#49@#_multiFrameArray": CDResult[];
        "__#49@#_matchExactNumberOfBarcodes": boolean;
        "__#49@#_multiFrameCount": number;
        "__#49@#_multiFrameResultSet": Set<unknown>;
        init(url?: string | undefined): Promise<number>;
        "__#49@#initMultiDecoding"(max_barcode: number): Promise<number>;
        decoderVersion(): Promise<string>;
        libraryVersion(): Promise<string>;
        setBarcodesToDecode(value: number, exactMatch: boolean): Promise<number>;
        "__#49@#setmaxBarcodeLimit"(value: number): void;
        timeLimit: number;
        picklistMode: number;
        customMode: CDCustomMode;
        preprocessType: CDPreprocessorType;
        securityLevel: CDSecurityLevel;
        characterSetEncoding: CDCharacterEncoding;
        setRegionOfInterest(ROI: CDRect, ensureCorners: boolean): Promise<void>;
        getRegionOfInterest(): Promise<CDRect>;
        decoding: boolean;
        codeWords: boolean;
        multiCodeOutputByPriority: boolean;
        multiFrameDecoding: boolean;
        setDuplicateDelay(filter_time: number): void;
        getDuplicateDelay(): number;
        decode(image: ImageData): Promise<CDResult[]>;
        "__#49@#checkImageSizeChangeForVerifier"(width: number, height: number): void;
        "__#49@#enableVerifier"(verification: CDVerifier, width: number, height: number, maxBarcodeRows: number, maxBarcodeCols: number): Promise<void>;
        "__#49@#getVerificationResult"(result: CDResult): Promise<{
            gradeFinal: number;
            gradeReferenceDecode: number;
            gradeContrast: number;
            scoreContrast: number;
            gradeModulation: number;
            gradeReflectanceMargin: number;
            gradeFixedPatternDamage: number;
            gradeAxialNonuniformity: number;
            scoreAxialNonuniformity: number;
            gradeGridNonuniformity: number;
            scoreGridNonuniformity: number;
            gradeUnusedErrorCorrect: number;
            scoreUnusedErrorCorrect: number;
            apertureSizeUsed: number;
        }>;
        "__#49@#setImage"(imageBuffer: any, imageWidth: number, imageHeight: number): Promise<1 | undefined>;
        "__#49@#getBarcodeData"(num_barcodes_decoded: number, result_array: CDResult[], char_encoding: CDCharacterEncoding): Promise<CDResult[]>;
        "__#49@#getCodeWords"(index: number, result: CDResult): Promise<{
            numberOfCodewords: number;
            numberOfShortCodewordsBlock: number;
            numberOfLongCodewordsBlock: number;
            numberOfDataCodewords: number;
            numberOfErrorCodewords: number;
            eccBefore: Number[];
            eccAfter: Number[];
        }>;
        "__#49@#getBarcodeCoordinates"(index: number): Promise<CDRect>;
        "__#49@#getdecodeTime"(barcode_num: number): Promise<number>;
        "__#49@#getSymbologyNames"(barcode_num: number): Promise<string>;
        "__#49@#licenseStringParser"(license_string: string): Promise<string>;
        "__#49@#extractKeyFromLicConfigString"(license_string: string): Promise<string>;
        "__#49@#qrConfigStringParser"(configString: string): Promise<void>;
        "__#49@#activateFeatureSetting"(feature: string, setting: string, persistance: string): Promise<void>;
        "__#49@#getConfigTokens"(formatted_config: string): Promise<string[][]>;
        "__#49@#removeDuplicates"(result_array: CDResult[]): Promise<CDResult[]>;
    };
    CDPerformanceFeatures: {
        "__#1@#nativeLib": import("../PrivateClasses/nativeLibManagerForNode").NativeLib;
        "__#1@#_lowContrastDecoding": boolean;
        "__#1@#_dataParsing": number;
        "__#1@#_dataParsingString": string;
        "__#1@#_dataFormatting": boolean;
        "__#1@#_dataFormattingString": string;
        "__#1@#_dpmMode": CDDPM;
        "__#1@#_cdVerifier": CDVerifier;
        readonly stringFromPerformanceType: CDPerformanceType;
        lowContrast: boolean;
        setDataParsing(parsing: CDDataParsing, configString: string): Promise<void>;
        "__#1@#setdataparsing"(parsing: CDDataParsing, configString: string): Promise<void>;
        getDataParsing(): Promise<CDDataParsing>;
        getConfigStringForDataParsing(): Promise<string>;
        setDataFormatting(enable: boolean, formatString: string): Promise<void>;
        "__#1@#setdataformatting"(config_string: string): Promise<void>;
        getDataFormatting(): Promise<boolean>;
        getConfigStringForDataFormatting(): Promise<string>;
        DPMMode: CDDPM;
        verification: CDVerifier;
    };
    CDLicense: {
        "__#2@#nativeLib": import("../PrivateClasses/nativeLibManagerForNode").NativeLib;
        "__#2@#_license_status": license_status;
        "__#2@#_licensed_symbologies": string[];
        "__#2@#_licensed_features": CDPerformanceType[];
        "__#2@#_licensed_ext_symbologies": string[];
        activateLicense(license_string: string, qrlic?: boolean | undefined): Promise<import("../enums/CDLicenseResult").LicenseResult | undefined>;
        getLicensedSymbologies(): Promise<string[]>;
        getLicensedExtendedSymbologies(): Promise<string[]>;
        getLicensedPerformanceFeatures(): Promise<CDPerformanceType[]>;
        "__#2@#activateLicensedSymbologies"(licensed_symbologies: string[]): Promise<void>;
        "__#2@#enableOrDisableSymbologies"(symbologyList: string[], enable: Boolean): Promise<void>;
        "__#2@#activateLicensedPerformanceFeatures"(licensed_features: CDPerformanceType[]): Promise<void>;
        "__#2@#getPerfFeatures"(): Promise<CDPerformanceType[]>;
        "__#2@#getSymbologies"(): Promise<string[]>;
        "__#2@#getExtSymbologies"(): Promise<string[]>;
        "__#2@#getDCPolicyfromDecoder"(): Promise<import("../enums/CDDataPolicy").DataPolicySettingsType | undefined>;
        "__#2@#getDCPolicy"(policyStr: string): Promise<import("../enums/CDDataPolicy").DataPolicySettingsType | undefined>;
        "__#2@#getDCPolicyObject"(hexStr: string): Promise<{
            [key: string]: string;
        }>;
        "__#2@#getExpiration"(): Promise<number>;
        "__#2@#createBinarybits"(num: string): string;
        "__#2@#getDCPolicySettings"(settingsObj: import("../enums/CDDataPolicy").DataPolicySettingsType, dcPolicyObj: {
            [x: string]: string;
        }): Promise<import("../enums/CDDataPolicy").DataPolicySettingsType>;
        checkLicense(): license_status;
    };
    CDSymbology: typeof CDSymbology;
    CDResult: typeof CDResult;
    CDPerformanceType: typeof CDPerformanceType;
    CDDataParsing: typeof CDDataParsing;
    CDDPM: typeof CDDPM;
    CDVerifier: typeof CDVerifier;
    CDSecurityLevel: typeof CDSecurityLevel;
    CDCustomMode: typeof CDCustomMode;
    CDPreprocessorType: typeof CDPreprocessorType;
    CDCharacterEncoding: typeof CDCharacterEncoding;
    license_status: typeof license_status;
    CDDecodeStatus: typeof CDDecodeStatus;
    CDRect: typeof CDRect;
    QRCodePolarity: typeof QRCodePolarity;
    DataMatrixPolarity: typeof DataMatrixPolarity;
    AztecPolarity: typeof AztecPolarity;
    DotCodePolarity: typeof DotCodePolarity;
    GridMatrixPolarity: typeof GridMatrixPolarity;
    GoCodePolarity: typeof GoCodePolarity;
    HongKong2Of5Checksum: typeof HongKong2Of5Checksum;
    IATA2Of5Checksum: typeof IATA2Of5Checksum;
    Interleaved2Of5Checksum: typeof Interleaved2Of5Checksum;
    Matrix2Of5Checksum: typeof Matrix2Of5Checksum;
    Straight2Of5Checksum: typeof Straight2Of5Checksum;
    NEC2Of5Checksum: typeof NEC2Of5Checksum;
    CodabarChecksum: typeof CodabarChecksum;
    Code11Checksum: typeof Code11Checksum;
    Code39Checksum: typeof Code39Checksum;
    MSIPlesseyChecksum: typeof MSIPlesseyChecksum;
    CDPosition: typeof CDPosition;
    CDResolution: typeof CDResolution;
    CDFocus: typeof CDFocus;
    CDTorch: typeof CDTorch;
};
export default _default;
